/**
* Control code inspired from Grolleau et al.
* Additional thread: hardware interrupt for speed measurement
* Core thread: all other functions
**/
 
/*
 *	Variables
 */
/* Set temperature */
const float setTemperature = 21.0;

/* Serial port baudrate*/
#define BDR 9600
 
/* Pin name affectation */
const int TemperaturePin = A0;
const int MotorPin = 3; /* PWM output connected with Timer 2*/
const int TachoPin = 2;	/* Ouput for generating Hardware interrupt for speed measuring*/

/* Temperature in degrees*/
float temperature = 0.0; ;

/* Program duration storage: 0 for controling; 1 for sending */
unsigned long durees[2];

/* Control gain*/ 
const int gain = 20;

/* Time storage */
unsigned long currentAppliTime = 0 ;

/* Sensor value*/
int value = 0 ;

/* Motor control */
int control = 0 ;

/* Speed in rpm (roations per minute)*/
unsigned int rpm = 0;

/* Half tour duration */
volatile unsigned long dureedemitour = 0;

/* Buffers for sending data*/
char monbuffer[80];
char monbuffer1[80];

/* Variables holding statechart states */
#define Attente4 0
#define Attente3 1
#define Attente2 2
#define Attente1 3

/*
* Convert value read on temperature sensor into degrees Celcius
* value: value between [0-255] for voltage between [0-5V]
*/
float voltage2temperature(int value) {
  return (4.9*value-500)/10;
}

/* 
 *  Initialization thread
 */
void setup()
{
	/* Timer 2 for Motor control PWM signal generation, duty cycle is defined by control */
  pinMode(MotorPin,OUTPUT);
  /* Fast PWM Mode, non inverted */
  TCCR2A = 0x27; 
  TCCR2B = 0x0A;
  /* Outuput A: prescale factor  for 16 Mhz/(OCR2A*8) frequency */
  OCR2A = 80;
  /* Duty cycle initialization */
  OCR2B = 1;
  
  /*Hardware interrupt for measuring speed from Tacho*/ 
  pinMode(TachoPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(TachoPin),tachoChange,CHANGE);
  
  /* Initialization of USB speed */ 
  Serial.begin(BDR); 
  
  /*Initial temperature*/
  temperature = voltage2temperature(analogRead(TemperaturePin));
}

/*
 * Additional thread:
 * ISR (Interrupt Service Routine) for Hardware interrupt for measuring fan speed
 * Statechart
 */
void tachoChange()
{
  static unsigned long t1 = 0;
  static unsigned long t2 = 0;
  static char etat = Attente4;
  unsigned long tmp = 0 ;
  
  noInterrupts();		/* following code is non interruptible */
  tmp = micros();
  switch (etat) {
    case Attente4: 
      t1 = tmp;
      etat = Attente3;
      break;
    case Attente3:
      t2 = tmp;
      etat = Attente2;
      break;
    case Attente2:
      dureedemitour = tmp-t1;
      t1 = tmp;
      etat = Attente1;
      break;
    case Attente1:
      dureedemitour = tmp-t2;
      t2 = tmp;
      etat = Attente2;
      break;
  }
  interrupts();		/* End of critical code*/
}


/*
 * Calculate speed from ISR, in rpm (rotations per minute): (60 secondes/2)/dureedemitour
 * dureedemitour is in Âµs
 */
unsigned int readSpeed()
{
  unsigned long d;
  noInterrupts();
  d = dureedemitour;
  interrupts();
  return 30000000/d;
}

/*
 *  Send data on serial port
 */
void sendSignals(const float setTemperature, float temperature, unsigned int rpm, int control)
{
  int temp1,temp2, temp3, temp4;
  temp1 = floor(setTemperature);
  temp2 = floor((setTemperature-temp1)*10);
  temp3 = floor(temperature);
  temp4 = floor((temperature-temp3)*10);
  sprintf(monbuffer,"SetTemperature = %d.%d\t CurrentTemperature = %d.%d\t Speed = %u\t Control = %u\n", temp1, temp2, temp3, temp4, rpm, control);
//  sprintf(monbuffer,"%d.%d,%d.%d,%u,%u,%u\n", temp1, temp2, temp3, temp4, rpm, control);
  //unsigned long currentAppliTime = micros();
  Serial.write(monbuffer,strlen(monbuffer));
  Serial.flush();
  /*
  durees[1] = micros() - currentAppliTime ;
  sprintf(monbuffer1,"CtrlTime = %u\t sendTime = %u\r\n", durees[0], durees[1]);
  Serial.flush();
  */
  }

/*
 * Define duty cycle of PWM control signal generated by Timer 2
 * Duty cycle in [1-79]
 */
void controlMotor(unsigned int val)
{
  OCR2B = val;
}

/*
 * Function to saturate value
 * v: input value
 * Min: minimum output value
 * Max: maximum output value
 */
int saturateControl(int v, int Min, int Max)
{
  if (v>Max) return Max;
  if (v<Min) return Min;
  return v;
}


/*
 * Core thread: infinite loop
 */
void loop()
{
	/* number of microseconds since Arduino board began running current program */
  currentAppliTime = micros();
  
  /* Acquire, filter and convert into degrees */
  value = analogRead(TemperaturePin);
  temperature = 0.8*temperature+0.2*voltage2temperature(value);
  
  /* Calculate, saturate and apply control */
  control = saturateControl((temperature-setTemperature)*gain,1, 79);
  controlMotor(control);
  
  /* Calculate control stage duration*/
  durees[0] = micros()-currentAppliTime;
  /* Read speed */
  rpm = readSpeed();
  /* Send signals to master*/
  sendSignals(setTemperature,temperature,rpm,control);

/*  if (Serial.available() > 0) {
    Serial.read();
    sendSignals(setTemperature,temperature,rpm,control);
  }*/
}
